// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package MSG

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MerkleNode struct {
	UserName             string   `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	User2Name            string   `protobuf:"bytes,2,opt,name=User2name,proto3" json:"User2name,omitempty"`
	ValueOfMerkleNode    float64  `protobuf:"fixed64,3,opt,name=ValueOfMerkleNode,proto3" json:"ValueOfMerkleNode,omitempty"`
	ContentHash          string   `protobuf:"bytes,4,opt,name=ContentHash,proto3" json:"ContentHash,omitempty"`
	TimeStampOfContent   string   `protobuf:"bytes,5,opt,name=TimeStampOfContent,proto3" json:"TimeStampOfContent,omitempty"`
	TypeOfThis           int32    `protobuf:"varint,6,opt,name=TypeOfThis,proto3" json:"TypeOfThis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleNode) Reset()         { *m = MerkleNode{} }
func (m *MerkleNode) String() string { return proto.CompactTextString(m) }
func (*MerkleNode) ProtoMessage()    {}
func (*MerkleNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *MerkleNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleNode.Unmarshal(m, b)
}
func (m *MerkleNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleNode.Marshal(b, m, deterministic)
}
func (m *MerkleNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleNode.Merge(m, src)
}
func (m *MerkleNode) XXX_Size() int {
	return xxx_messageInfo_MerkleNode.Size(m)
}
func (m *MerkleNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleNode.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleNode proto.InternalMessageInfo

func (m *MerkleNode) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *MerkleNode) GetUser2Name() string {
	if m != nil {
		return m.User2Name
	}
	return ""
}

func (m *MerkleNode) GetValueOfMerkleNode() float64 {
	if m != nil {
		return m.ValueOfMerkleNode
	}
	return 0
}

func (m *MerkleNode) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func (m *MerkleNode) GetTimeStampOfContent() string {
	if m != nil {
		return m.TimeStampOfContent
	}
	return ""
}

func (m *MerkleNode) GetTypeOfThis() int32 {
	if m != nil {
		return m.TypeOfThis
	}
	return 0
}

type Block struct {
	Index                int32         `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	BlockBody            []*MerkleNode `protobuf:"bytes,2,rep,name=BlockBody,proto3" json:"BlockBody,omitempty"`
	BlockCreater         string        `protobuf:"bytes,3,opt,name=BlockCreater,proto3" json:"BlockCreater,omitempty"`
	Hash                 string        `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	PrevBlockHash        string        `protobuf:"bytes,5,opt,name=PrevBlockHash,proto3" json:"PrevBlockHash,omitempty"`
	TimeStamp            string        `protobuf:"bytes,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Block) GetBlockBody() []*MerkleNode {
	if m != nil {
		return m.BlockBody
	}
	return nil
}

func (m *Block) GetBlockCreater() string {
	if m != nil {
		return m.BlockCreater
	}
	return ""
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetPrevBlockHash() string {
	if m != nil {
		return m.PrevBlockHash
	}
	return ""
}

func (m *Block) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

type User struct {
	UserName             string   `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserAddTime          string   `protobuf:"bytes,2,opt,name=UserAddTime,proto3" json:"UserAddTime,omitempty"`
	UserFileNume         int32    `protobuf:"varint,3,opt,name=UserFileNume,proto3" json:"UserFileNume,omitempty"`
	Contribution         float64  `protobuf:"fixed64,4,opt,name=Contribution,proto3" json:"Contribution,omitempty"`
	Contribution1        float64  `protobuf:"fixed64,5,opt,name=Contribution1,proto3" json:"Contribution1,omitempty"`
	Contribution2        float64  `protobuf:"fixed64,6,opt,name=Contribution2,proto3" json:"Contribution2,omitempty"`
	Contribution3        float64  `protobuf:"fixed64,7,opt,name=Contribution3,proto3" json:"Contribution3,omitempty"`
	Useronlion           int64    `protobuf:"varint,8,opt,name=Useronlion,proto3" json:"Useronlion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetUserAddTime() string {
	if m != nil {
		return m.UserAddTime
	}
	return ""
}

func (m *User) GetUserFileNume() int32 {
	if m != nil {
		return m.UserFileNume
	}
	return 0
}

func (m *User) GetContribution() float64 {
	if m != nil {
		return m.Contribution
	}
	return 0
}

func (m *User) GetContribution1() float64 {
	if m != nil {
		return m.Contribution1
	}
	return 0
}

func (m *User) GetContribution2() float64 {
	if m != nil {
		return m.Contribution2
	}
	return 0
}

func (m *User) GetContribution3() float64 {
	if m != nil {
		return m.Contribution3
	}
	return 0
}

func (m *User) GetUseronlion() int64 {
	if m != nil {
		return m.Useronlion
	}
	return 0
}

func init() {
	proto.RegisterType((*MerkleNode)(nil), "MSG.MerkleNode")
	proto.RegisterType((*Block)(nil), "MSG.Block")
	proto.RegisterType((*User)(nil), "MSG.User")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x4e, 0xea, 0x40,
	0x10, 0x86, 0xb3, 0x94, 0x72, 0xe8, 0x70, 0xc8, 0xc9, 0xd9, 0x9c, 0x8b, 0xe6, 0xc4, 0x98, 0xa6,
	0xf1, 0xa2, 0x17, 0xda, 0xc4, 0xf2, 0x04, 0x42, 0x22, 0x7a, 0x01, 0x98, 0x05, 0xbd, 0x2f, 0x76,
	0x90, 0x86, 0xb6, 0x4b, 0xb6, 0xc5, 0xc8, 0xcb, 0xf8, 0x3c, 0x3e, 0x89, 0xcf, 0x61, 0x76, 0x20,
	0xb4, 0x05, 0xe3, 0xdd, 0xcc, 0xff, 0xff, 0xdd, 0xcc, 0x37, 0x53, 0xe8, 0xa6, 0x98, 0xe7, 0xe1,
	0x0b, 0xfa, 0x6b, 0x25, 0x0b, 0xc9, 0x8d, 0xd1, 0x74, 0xe8, 0x7e, 0x32, 0x80, 0x11, 0xaa, 0x55,
	0x82, 0x63, 0x19, 0x21, 0xff, 0x0f, 0xed, 0xc7, 0x1c, 0xd5, 0x38, 0x4c, 0xd1, 0x66, 0x0e, 0xf3,
	0x2c, 0x71, 0xe8, 0xf9, 0x19, 0x58, 0xba, 0x0e, 0x32, 0x6d, 0x36, 0xc8, 0x2c, 0x05, 0x7e, 0x09,
	0x7f, 0x9f, 0xc2, 0x64, 0x83, 0x93, 0x45, 0xf9, 0x9c, 0x6d, 0x38, 0xcc, 0x63, 0xe2, 0xd4, 0xe0,
	0x0e, 0x74, 0x06, 0x32, 0x2b, 0x30, 0x2b, 0xee, 0xc2, 0x7c, 0x69, 0x37, 0xe9, 0xb5, 0xaa, 0xc4,
	0x7d, 0xe0, 0xb3, 0x38, 0xc5, 0x69, 0x11, 0xa6, 0xeb, 0xc9, 0x62, 0xef, 0xd8, 0x26, 0x05, 0xbf,
	0x71, 0xf8, 0x39, 0xc0, 0x6c, 0xbb, 0xc6, 0xc9, 0x62, 0xb6, 0x8c, 0x73, 0xbb, 0xe5, 0x30, 0xcf,
	0x14, 0x15, 0xc5, 0xfd, 0x60, 0x60, 0xf6, 0x13, 0xf9, 0xbc, 0xe2, 0xff, 0xc0, 0xbc, 0xcf, 0x22,
	0x7c, 0x23, 0x40, 0x53, 0xec, 0x1a, 0x7e, 0x05, 0x16, 0xd9, 0x7d, 0x19, 0x6d, 0xed, 0x86, 0x63,
	0x78, 0x9d, 0xe0, 0x8f, 0x3f, 0x9a, 0x0e, 0xfd, 0x72, 0x6a, 0x51, 0x26, 0xb8, 0x0b, 0xbf, 0xa9,
	0x19, 0x28, 0x0c, 0x0b, 0x54, 0x44, 0x6a, 0x89, 0x9a, 0xc6, 0x39, 0x34, 0x2b, 0x74, 0x54, 0xf3,
	0x0b, 0xe8, 0x3e, 0x28, 0x7c, 0xa5, 0x1c, 0x99, 0x3b, 0xa2, 0xba, 0xa8, 0x57, 0x7d, 0x40, 0x24,
	0x16, 0x4b, 0x94, 0x82, 0xfb, 0xde, 0x80, 0xa6, 0x5e, 0xfc, 0x8f, 0xd7, 0x72, 0xa0, 0xa3, 0xeb,
	0x9b, 0x28, 0xd2, 0x1f, 0xee, 0xef, 0x55, 0x95, 0x34, 0x82, 0x6e, 0x6f, 0xe3, 0x04, 0xc7, 0x9b,
	0x74, 0x77, 0x2c, 0x53, 0xd4, 0x34, 0x9d, 0xd1, 0x0b, 0x56, 0xf1, 0x7c, 0x53, 0xc4, 0x32, 0x23,
	0x14, 0x26, 0x6a, 0x9a, 0x46, 0xaa, 0xf6, 0xd7, 0x84, 0xc4, 0x44, 0x5d, 0x3c, 0x4e, 0x05, 0x84,
	0x75, 0x94, 0x0a, 0x8e, 0x53, 0x3d, 0xfb, 0xd7, 0x69, 0xaa, 0xa7, 0x6f, 0xad, 0xa7, 0x94, 0x59,
	0xa2, 0x67, 0x6a, 0x3b, 0xcc, 0x33, 0x44, 0x45, 0x99, 0xb7, 0xe8, 0x07, 0xef, 0x7d, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0xe5, 0x8d, 0x3d, 0xf1, 0x02, 0x00, 0x00,
}
